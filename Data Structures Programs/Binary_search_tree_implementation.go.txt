package main

import (
	"fmt"
)

// Node represent the components of a Binary search tree
type Node struct {
	key   int
	left  *Node
	right *Node
}

//Insert will add Node to the tree
//The key should not be already in the tree
func (n *Node) Insert(k int) {
	if n.key < k {
		//move right
		if n.right == nil {
			n.right = &Node{key: k}
		} else {
			n.right.Insert(k)
		}
	} else if n.key > k {
		// Move left
		if n.left == nil {
			n.left = &Node{key: k}
		} else {
			n.left.Insert(k)
		}
	}

}

//Search will take a  key value and returns true if its present as a node in the tree
func (n *Node) Search(k int) bool {
	if n == nil {
		return false
	}

	if n.key < k {
		// Move Right
		return n.right.Search(k)
	} else if n.key > k {
		//Move Left
		return n.left.Search(k)
	}
	return true
}

func main() {
	tree := &Node{key: 100}
	tree.Insert(200)
	fmt.Println(tree)
	tree.Insert(52)
	tree.Insert(203)
	tree.Insert(19)
	tree.Insert(76)
	tree.Insert(150)
	tree.Insert(310)
	tree.Insert(7)
	tree.Insert(24)
	tree.Insert(88)
	tree.Insert(276)

	tree.Search(76)
	fmt.Println(tree.Search(400))
}

